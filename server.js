import express from "express";
import fetch from "node-fetch";
import crypto from "crypto";

// ============= CONFIG =============
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const LINE_TOKEN      = process.env.LINE_CHANNEL_ACCESS_TOKEN;
const LINE_SECRET     = process.env.LINE_CHANNEL_SECRET;
const PORT            = process.env.PORT || 3001;

// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á
const MAX_TURNS = 10;

// ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡πà‡∏á‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö (0.0 - 1.0)
const STICKER_PROBABILITY = 0.35;

// ‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πâ (line sticker ids)
const STICKERS = [
  { packageId: "11537", stickerId: "52002768" }, // ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ß‡∏¥‡πâ‡∏á‡πÜ
  { packageId: "11539", stickerId: "52114110" }, // ‡πÇ‡∏ö‡∏Å‡∏°‡∏∑‡∏≠
  { packageId: "11537", stickerId: "52002734" }, // ‡∏¢‡∏¥‡πâ‡∏°‡∏ï‡∏≤‡∏´‡∏ß‡∏≤‡∏ô
  { packageId: "8525",  stickerId: "16581249" }, // ‡πÇ‡∏´‡πà‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå
];

// Prompt ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å ‚Äú‡∏û‡∏µ‡πà‡∏û‡∏•‡∏≠‡∏¢ BN9‚Äù
const SYSTEM_HINT =
  "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ‚Äú‡∏û‡∏µ‡πà‡∏û‡∏•‡∏≠‡∏¢ BN9‚Äù ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå BN9 ‡∏û‡∏π‡∏î‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏°‡∏µ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á " +
  "‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏ô‡∏¥‡∏î‡πÜ ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥";

const GOODBYE_TEXT =
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏û‡∏µ‡πà‡∏û‡∏•‡∏≠‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ ‚ú®\n" +
  "‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡πÄ‡∏£‡∏¥‡∏á ‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ **10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ üíö";

// ============= APP SETUP ==========
const app = express();
// ‡πÄ‡∏Å‡πá‡∏ö rawBody ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô LINE
app.use(express.json({ verify: (req, _res, buf) => { req.rawBody = buf; }}));

// ============= MEMORY (per-user turns) ==========
/** { [userId: string]: { count: number, ts: number } } */
const turns = new Map();
// ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏°. ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
setInterval(() => turns.clear(), 24*60*60*1000);

// ============= HELPERS ============
function randSticker() {
  return STICKERS[Math.floor(Math.random()*STICKERS.length)];
}

function chunkText(text, maxLen = 350) {
  // ‡∏ï‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥ (‡∏Å‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏≥) ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (1/2/3) ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
  const parts = [];
  let buf = "";
  for (const word of text.split(/(\s+)/)) {
    if ((buf + word).length > maxLen) {
      parts.push(buf.trim());
      buf = word.trimStart();
    } else {
      buf += word;
    }
  }
  if (buf.trim()) parts.push(buf.trim());
  return parts;
}

async function askOpenAI(message) {
  const r = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: SYSTEM_HINT },
        { role: "user",   content: message }
      ],
      temperature: 0.7,
    }),
  });
  const data = await r.json();
  if (!r.ok) {
    console.error("OpenAI error:", data);
    throw new Error("OpenAI failed");
  }
  return data?.choices?.[0]?.message?.content || "‡∏û‡∏µ‡πà‡∏û‡∏•‡∏≠‡∏¢‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ üòÖ";
}

async function lineReply(replyToken, messages){
  return fetch("https://api.line.me/v2/bot/message/reply",{
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${LINE_TOKEN}`,
    },
    body: JSON.stringify({ replyToken, messages }),
  });
}

// ============= HTTP DEMO (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ) ============
app.post("/api/chat", async (req, res) => {
  try {
    const msg = req.body?.message;
    if (!msg) return res.status(400).json({ error: "missing message" });
    const reply = await askOpenAI(msg);
    res.json({ reply });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "OpenAI failed" });
  }
});

app.get("/health", (_req,res)=>res.json({ status:"ok" }));

// ============= LINE WEBHOOK ============
app.post("/webhooks/line", async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
    const signature = req.get("x-line-signature");
    const hmac = crypto.createHmac("sha256", LINE_SECRET);
    hmac.update(req.rawBody);
    if (signature !== hmac.digest("base64")) {
      return res.status(401).send("bad signature");
    }

    const { events = [] } = req.body || {};
    await Promise.all(events.map(async (ev) => {
      if (ev.type !== "message" || ev.message?.type !== "text") return;

      const userId  = ev.source?.userId || "anon";
      const textIn  = ev.message.text?.trim() || "";

      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
      const now  = Date.now();
      const info = turns.get(userId) || { count: 0, ts: now };
      info.count += 1;
      info.ts = now;
      turns.set(userId, info);

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô MAX_TURNS ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏õ‡∏¥‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      if (info.count >= MAX_TURNS) {
        const farewellMsgs = [
          { type: "text", text: GOODBYE_TEXT },
          // ‡πÉ‡∏™‡πà‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
          ...(Math.random()<0.8 ? [{ type:"sticker", ...randSticker() }] : []),
        ];
        await lineReply(ev.replyToken, farewellMsgs);
        return;
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GPT
      const gpt = await askOpenAI(textIn);

      // ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≠‡∏ô 1/2/3
      const parts = chunkText(gpt, 350).slice(0, 3);
      const messages = [];

      // ‡πÉ‡∏™‡πà‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô (‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏ô‡∏¥‡∏î‡πÜ)
      if (Math.random() < STICKER_PROBABILITY) {
        messages.push({ type: "sticker", ...randSticker() });
      }

      parts.forEach((p, i) => {
        const head = parts.length > 1 ? `(${i+1}/${parts.length}) ` : "";
        // ‡πÅ‡∏≠‡∏ö‡∏≠‡πâ‡∏≠‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        const tail = (i === parts.length-1 && Math.random()<0.25) ? " ü©∑" : "";
        messages.push({ type:"text", text: `${head}${p}${tail}`.slice(0, 490) });
      });

      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πâ‡∏≠‡∏ô‡πÄ‡∏•‡∏¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏´‡∏ß‡∏≤‡∏ô‡πÜ ‡πÄ‡∏ö‡∏≤‡πÜ
      if (messages.filter(m=>m.type==="text").length === 1 && Math.random()<0.25) {
        messages.push({ type:"text", text:"‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏ó‡∏±‡∏Å‡∏û‡∏µ‡πà‡∏û‡∏•‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡πâ‡∏≤ ü§ç" });
      }

      await lineReply(ev.replyToken, messages);
    }));

    res.status(200).send("ok");
  } catch (e) {
    console.error("LINE webhook error:", e);
    res.status(500).send("error");
  }
});

// ============= START =============
app.listen(PORT, () => {
  console.log(`‚úÖ BN9 test bot running on :${PORT}`);
});

